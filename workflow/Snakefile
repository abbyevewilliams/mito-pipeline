
# import packages
# -----------------------------------------------------
import os
from os.path import basename
import yaml


# load configuration
# -----------------------------------------------------
configfile: "config/config.yaml"


# load samples
# -----------------------------------------------------
with open(config["samples"]) as f:
    samples = yaml.safe_load(f)["samples"]
SAMPLES = list(samples.keys())

# Read in mapdamage preferences
MAPDAMAGE_RESCALE=config["mapdamage_rescale"]

# Function for extracting names of all fastq files

def get_fastq_dict():
    fq_dict = {}
    for sample, files in samples.items():
        for paired_base in files.get("paired_reads", []):
            fq_dict[basename(f"{paired_base}_R1.fastq.gz")] = f"Data/{paired_base}_R1.fastq.gz"
            fq_dict[basename(f"{paired_base}_R2.fastq.gz")] = f"Data/{paired_base}_R2.fastq.gz"
        for unpaired_base in files.get("unpaired_reads", []):
            fq_dict[basename(f"{unpaired_base}_R1.fastq.gz")] = f"Data/{unpaired_base}_R1.fastq.gz"
    return fq_dict

FASTQ_PATHS = get_fastq_dict()

# Function for extracting names of all pairs per sample

UNPAIRED_PAIRS = [
    (sample, files)
    for sample, data in samples.items()
    for files in data.get("unpaired_reads", [])
]

PAIRED_PAIRS = [
    (sample, files)
    for sample, data in samples.items()
    for files in data.get("paired_reads", [])
]

# Optional checks
#print("SAMPLES:", SAMPLES)
#print("ALL FASTQ FILES:", ALL_FASTQ_FILES)
#print("UNPAIRED_PAIRS:", UNPAIRED_PAIRS)
#print("PAIRED_PAIRS:", PAIRED_PAIRS)

# load rules
# -----------------------------------------------------
include: "rules/01_trim.smk"
include: "rules/02_map.smk"
include: "rules/03_dedup.smk"
include: "rules/04_damage.smk"
include: "rules/05_stats.smk"
include: "rules/06_consensus.smk"


# optional messages, log and error handling
# -----------------------------------------------------
onstart:
    print("\n--- Analysis started ---\n")


onsuccess:
    print("\n--- Workflow finished! ---\n")


onerror:
    print("\n--- An error occurred! ---\n")


# target rules
# -----------------------------------------------------

rule all:
    input:
        expand("results/01_qc/fastqc_initial/{sample_file}.html", sample_file=FASTQ_PATHS.keys()),
        expand("results/02_trimmed/se/{sample}--{file}.fastq.gz", zip, sample=[s for s, f in UNPAIRED_PAIRS], file=[f for s, f in UNPAIRED_PAIRS]), # trim unpaired reads
        expand("results/02_trimmed/pe/{sample}--{file}.collapsed.fastq.gz", zip, sample=[s for s, f in PAIRED_PAIRS], file=[f for s, f in PAIRED_PAIRS]),
        expand("results/02_trimmed/pe/{sample}--{file}.collapsed_trunc.fastq.gz", zip, sample=[s for s, f in PAIRED_PAIRS], file=[f for s, f in PAIRED_PAIRS]),        
        expand("results/01_qc/fastqc_post_trim/se/{sample}--{file}.html", zip, sample=[s for s, f in UNPAIRED_PAIRS], file=[f for s, f in UNPAIRED_PAIRS]), # post trimming fastqc
        expand("results/01_qc/fastqc_post_trim/pe/{sample}--{file}.{collapsed_type}.html", zip, sample=[s for s, p in PAIRED_PAIRS], file=[f for s, f in PAIRED_PAIRS], collapsed_type=["collapsed", "collapsed_trunc"]),
        expand("results/03_combined/{sample}.fastq.gz",sample=SAMPLES), # combined reads (se + pe)
        expand("results/logs/bwa_index/{species}.log", species=config["reference_genomes"].keys()), # indexed ref genomes
        expand("results/05_filt/{sample}.bam.bai", sample=SAMPLES), # mapped reads
        expand("results/06_dedup/{sample}.sorted.bam.bai", sample=SAMPLES), # dedupped bams
        expand("results/07_mapdamage/{sample}/{sample}.rescaled.bam", sample=SAMPLES) if MAPDAMAGE_RESCALE else [], # mapdamage rescale
        expand("results/07_mapdamage/{sample}/{sample}.rescaled.bam.bai", sample=SAMPLES) if MAPDAMAGE_RESCALE else [],
        expand("results/08_stats/{sample}.stats", sample=SAMPLES), # stats 
        expand("results/08_stats/{sample}.depth", sample=SAMPLES),
        "results/08_stats/mapping_summary.txt",
        "results/08_stats/avg_depth.txt", 
        expand("results/09_consensus/{sample}.fa.gz", sample=SAMPLES) # consensus

localrules:
    all
